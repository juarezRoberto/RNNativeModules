//apply plugin: "com.android.application"
//apply plugin: "org.jetbrains.kotlin.android"
//apply plugin: "com.facebook.react"

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.facebook.react'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.devtools.ksp'
    id 'org.jetbrains.kotlin.plugin.compose'
}

apply from: "$rootProject.projectDir/buildsystem/config.gradle"
apply from: "$rootProject.projectDir/buildsystem/flavorsbuild.gradle"
apply from: "$rootProject.projectDir/buildsystem/basedependencies.gradle"
apply from: "$rootProject.projectDir/buildsystem/library.gradle"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

android {
    ndkVersion rootProject.ext.ndkVersion
//    buildToolsVersion rootProject.ext.buildToolsVersion
//    compileSdk rootProject.ext.compileSdkVersion
    namespace "com.awesomeproject"
    compileSdk 35

//    namespace "com.awesomeproject"
    defaultConfig {
//        applicationId "com.awesomeproject"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"

        vectorDrawables.useSupportLibrary true
        multiDexEnabled true
    }
//    signingConfigs {
//        debug {
//            storeFile file('debug.keystore')
//            storePassword 'android'
//            keyAlias 'androiddebugkey'
//            keyPassword 'android'
//        }
//    }
    buildTypes {
//        debug {
//            signingConfig signingConfigs.debug
//        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    sourceSets {
//        prod { java.srcDirs('src/prod/java') }
//        qa { java.srcDirs('src/qa/java') }
        dev { java.srcDirs('src/dev/java') }
    }

    flavorDimensions "version", "service"
    productFlavors {
        dev {
            applicationId "com.awesomeproject" + ".dev"
            dimension "version"
            versionNameSuffix "-dev"
            externalNativeBuild {
                cmake {
                    arguments "-DVERSION=dev"
                }
            }
        }
//        qa {
//            applicationId configuration.applicationId + ".qa"
//            dimension "version"
//            versionNameSuffix "-qa"
//            externalNativeBuild {
//                cmake {
//                    arguments "-DVERSION=qa"
//                }
//            }
//        }
//        prod {
//            applicationId configuration.applicationId
//            dimension "version"
//            versionNameSuffix "-prod"
//            externalNativeBuild {
//                cmake {
//                    arguments "-DVERSION=prod"
//                }
//            }
//        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        pickFirst "META-INF/proguard/androidx-annotations.pro"
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }

    /**
     * Room config to export db schemas
     */
    defaultConfig {
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
                arguments["room.incremental"] = "true"
            }
        }
    }
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = classpathBase.kotlinCompiler
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation project(':mylib')
    gmsImplementation project(':zemytalents')

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation platform("${libraries.composeBom}")
    implementation libraries.composeUi
    implementation libraries.activityCompose
    implementation libraries.composeUiGraphics
    debugImplementation libraries.composeTooling
    implementation libraries.composeUiGraphics
    implementation libraries.composeUiPreview
    implementation libraries.composeMaterial3
    implementation libraries.coilCompose
    implementation libraries.lottieCompose
    implementation libraries.composeRuntime
    implementation libraries.lottieCompose

    gmsImplementation "com.upax.zeus.nuevo.android.sdk:chatsdk-gms:1.10.2"
    hmsImplementation "com.upax.zeus.nuevo.android.sdk:chatsdk-hms:1.10.2"
    gmsImplementation zeusLibraryGms.zcommonutils
    hmsImplementation zeusLibraryHms.zcommonutils
    implementation libraries.waveformSeekBar
    implementation platform("${libraries.firebaseBom}")
    implementation libraries.firebaseFirestoreKtx
    implementation libraries.firebaseStorageKtx
}
